.. _introducton:

Introduction
============

Developing inflow boundary field for scale-resolving simulations of fluid flow
has received significant attention from the CFD community.
A review of existing methods can be found in :cite:`Tabor2010` and
:cite:`Jarrin2008`.

As correctly pointed out in :cite:`Tabor2010`, in order to benchmark existing
methods one would require to implement all of them in a single code.
Typically, however, a small number of methods is implemented within the
framework of a concrete solver.
A solution to this problem is to create a solver-agnostic library which would
implement various generation methods found in the literature.
Eddylicious strives to become such a library.

In order to support a large variety of CFD solvers, all the inflow fields
generated by eddylicious are saved to disk.
The only requirement on the solver's side is then to be able to read in
boundary data from the hard-drive.
Since different solvers support different formats for boundary data storage,
eddylicious supports output in several different formats and can easily be
extended to support more.

The fact that eddylicious is written in python implies that one is able to
harness the power of all the well-developed libraries written for this
language, such as numpy, scipy, h5py etc.
This makes eddylicious a convenient tool for prototyping new inflow
generation methods.

Interfacing with solvers via files also removes the necessity to consider
solver-related issues, for instance geometry decomposition for parallel
processing.
This ensures that the code in eddylicious is free of clutter and makes it an
ideal place for showcasing newly-developed methods and making them instantly
available to the CFD community.








