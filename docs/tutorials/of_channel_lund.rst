.. _tut_of_channel_lund:

Channel flow in OpenFOAM using Lund's rescaling
===============================================

Introduction
------------

In this tutorial, channel flow will be simulated.
First, a precursor simulation will be setup, which will compute channel flow
using periodic boundary conditions in both the streamwise and spanwise
directions.

The velocity fields created by the precursor will be used as input for
the rescaling procedure developed by Lund et al :cite:`Lund1998`.
It will be used to generate the inflow velocity field for the main simulation,
which is also channel flow, but with velocity inlet/poressure outlet boundaries
in the streamwise direction.

After completing this tutorial you will be able to do the following.

    * Set-up a precursor channel flow simulation in OpenFOAM.

    * Use the rescaling method developed by Lund et al to generate inflow
      fields for the main simulation.

    * Read in the boundary data generated by Eddylicious in OpenFOAM.

Essentially, the guidelines found in :ref:`workflow_openfoam` are applied here
to the concrete case of channel flow and Lund's rescaling procedure to generate
the inflow velocity field.

The tutorial cases have been tested with OpenFOAM 2.3.1.
It is assumed that the user has some experience in running and setting up
simulations in OpenFOAM and is familiar with associated terminology.

Overview of the set-up
----------------------

As described in the introduction, the goal of this tutorial is to conduct a
channel flow simulation using OpenFOAM and eddylicious.
Channel flow is a flow between two infinite parallel plates driven by a
pressure gradient.
The flow is fully defined by the friction velocity-based Reynolds number
:math:`\text{Re}_\tau = u_\tau \delta/\nu`, where :math:`u_\tau` is the friction
velocity, :math:`\nu` is the kinematic viscosity, and :math:`\delta` is the
half-width of the channel.

The computational cost of the simulation grows with :math:`\text{Re}_\tau`,
therefore in this tutorial we will use the lowest Reynolds number for which
DNS data is available, namely :math:`\text{Re}_\tau = 180`.
This will allow using a mesh fine enough to resolve a big part of the turbulent
structures present in the fow, yet small enough for the case to be computed in
a reasonable time on a single workstation.

.. _fig-channel-flow:

.. figure:: figures/channel_flow.*
   :align: center
   :width: 500px

   Channel flow domain.

The common way to set-up a channel flow simulation is to create a rectangular
domain of a size sufficiently large to contain the largest turbulent
structures present in the flow.
The domain used in the tutorial is shown in :numref:`fig-channel-flow`.
The size of the domain is
:math:`L_x \times 2\delta \times L_z = 9 \times 2 \times 4`.

To simulate an infinite domain, periodic boundary conditions are commonly
applied in the stream- and spanwise directions.
The pressure gradient is then introduced via an extra forcing term
in the momentum equations.

However, for the purpose of testing an inflow field generation method, a
velocity inlet can be used as the boundary condition at :math:`x=0`, and
a pressure outlet at :math:`x=L_x`.

The peculiarity of this tutorial is that the chosen inflow generation method
itself requires us to compute another channel flow (see :ref:`lund_rescaling`),
which will serve as a precursor simulation for the "main" channel flow
simulation.
In the precursor simulation periodic boundaries in both stream- and spanwise
direction will be used.
The same mesh will be used in both simulations, and in both simulations
the Reynolds number :math:`\text{Re}_\tau` will be set to 180.

Such a set-up might seem completely meaningless, but in fact it can be used
as a reference solution within a simulation campaign that tests various
inflow generation methods :cite:`Keating2004a`.

The precursor simulation
------------------------

The first part of the tutorial will deal with setting up a precursor simulation
that will be later used to generate the inflow fields for the main simulation.
Please follow the following steps.

   1. Unpack ``channel_flow_lund_rescaling.tar.gz`` found in
      ``eddylicious/tutorials`` to a location of your preference (commonly
      ``run``).
      Two folders will be unpacked, ``precursor`` and ``main``.
      Go inside of the ``precursor`` folder.

   2. Let us explore the case.
      Data for time 1000 is available, that is the case has been pre-run to
      get rid of transients, therefore can proceed with saving the velocity
      fields needed for the rescaling procedure directly.

      Opening ``1000/U`` verifies that cycling boundary conditions are applied
      in both streamwise and spanwise directions. ::

         inlet
         {
            type    cyclic;
         }

         outlet
         {
            type    cyclic;
         }

         left
         {
            type    cyclic;
         }

         right
         {
            type    cyclic;
         }

      In ``system/fvOptions`` the mean streamwise velocity ``Ubar`` is
      prescribed.
      This is equivalent to prescribing a pressure gradient. ::

         momentumSource
         {
            type            pressureGradientExplicitSource;
            active          on;
            selectionMode   all;

            pressureGradientExplicitSourceCoeffs
            {
                fieldNames  (U);
                Ubar        (1.0 0 0 );
            }
         }

      3. In the ``controlDict`` a ``surfaces`` function object is used to
         save the velocity field from the inlet patch to a file at every
         time-step. ::

             sampledSurface
             {
                 type surfaces;
                 outputControl timeStep;
                 outputInterval 1;
                 enabled true;

                 surfaceFormat foamFile;
                 interpolationScheme none;
                 interpolate false;
                 triangulate false;

                 fields
                 (
                     U
                 );

                 surfaces
                 (
                     inletSurface
                     {
                         type patch;
                         patches (inlet);
                     }
                 );
             }

         The appropriate options make sure that the surface is not
         triangulated, and that no interpolation of the data is performed,
         we therefore save all the raw values at all the face centres.
         The ``foamFile`` format is chosen, since eddylicious can read in data
         stored in that format.

      4. Run ``blockMesh`` in order to create the mesh.
         It is recommended that you run the case using 4 processors.
         You can, however, modify this value in ``system/decomposeParDict``.
         In order to decompose  the mesh run ``decomposePar``.

      5. Now everything is ready to run the case.
         The solver ``pimpleFoam`` will be used.
         Execute the solver. If you are running in parallel, add the
         ``-parallel`` flag and execute the solver with your MPI executable and
         the appropriate number of cores as an argument.
         Running the case will take a while.

      5. Run ``postChannelFlow``
         (https://bitbucket.org/lesituu/postchannelflow)
         to get the mean velocity and the components of the Reynolds stress tensor
         averaged along the streamwise and spanwise directions.

      6. Compare result to DNS, see scripts in
         ``postProcessing/collapsedFields``.

      7. Compute :math:`u_\tau` and :math:`\delta_{99}`, see scripts in
         ``postProcessing/collapsedFields``.

The main simulation
-------------------

      1. Go to the case ``main``. Run ``blockMesh``. Run ``sample``.

      2. The inlet is divided into two patches, ``inletBot`` and ``inletTop``.
         Velocity fields are generated for each patch separately.

      3. The generation procedure is controlled by a configuration script.
          One for each inlet patch, ``rescalingConfigBot`` and
          ``rescalingConfigTop``.

      4. Explore the options in the config.

      5. Run ``runLundRescaling.py --config=rescalingConfigTop/Bot``.

      6. Run the case.




.. important::

    This offering is not approved or endorsed by OpenCFD Limited, producer
    and distributor of the OpenFOAM software and owner of the OPENFOAM®  and
    OpenCFD®  trade marks.